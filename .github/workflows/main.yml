name: Deploy Docker to VM

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_ACCESS_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
  DOCKERHUB_REPOSITORY_CLIENT: ${{ secrets.DOCKERHUB_REPOSITORY_CLIENT }}
  DOCKERHUB_REPOSITORY_SERVER: ${{ secrets.DOCKERHUB_REPOSITORY_SERVER }}

  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push Docker image to Docker Hub
        run: |
          docker compose build --no-cache
          docker compose push

      - name: Deploy the Docker image to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          password: ${{ secrets.VM_PASSWORD }}
          envs: DOCKERHUB_USERNAME, DOCKERHUB_ACCESS_TOKEN, DOCKERHUB_REPOSITORY_CLIENT, DOCKERHUB_REPOSITORY_SERVER, DB_HOST, DB_PASSWORD, DB_PORT, DB_NAME, DB_USER
          script: |
            # Navigate to the directory where Docker Compose is executed
            cd search/

            # Log in to DockerHub
            sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_ACCESS_TOKEN

            # Stop and remove the previous Docker session
            sudo docker stop $(sudo docker ps -q --filter "name=server")
            sudo docker stop $(sudo docker ps -q --filter "name=client")
            
            # Pull the latest images
            sudo docker compose pull

            # Start the containers using Docker Compose
            sudo docker compose run -d --rm -v "/etc/letsencrypt:/etc/letsencrypt" -p 443:443 -p 80:80 client